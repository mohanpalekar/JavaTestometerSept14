package javaPractice;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class Q1 {

	public static void main(String[] args) {

		int [] ar = {3,6,8,2,1,5,3,7,0,-12,24,54,-96,103,-1,3,3,6,-8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,33,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3,6,8,2,1,5,3,0,12,24,54,96,6,3,3};

		getPairsOf7(ar);

	}

	public static void getPairsOf7(int [] ar) {

		long startTime = System.currentTimeMillis();

		System.out.println(ar.length);

		List<Integer> list = Arrays.stream(ar).distinct().sorted().boxed().collect(Collectors.toList());

		Collections.sort(list);

		System.out.println(list.size());

		System.out.println(list);

		int start = list.get(0);

		System.out.println(start);

		//List<Integer> list = Arrays.asList(-96, -12, -8, -1, 0, 1, 2, 3, 5, 6, 7, 8, 12, 24, 33, 54, 96, 103);

		System.out.println(start);

		int y = list.stream().filter(x -> (start+x)>=7).findFirst().get();		

		int end = list.indexOf(y);

		System.out.println(end);

		System.out.println(list.get(end));

		list.stream().forEach(x -> {
			for(int i=end; i>list.indexOf(x); i--) {
				if(x+list.get(i)>=7) {
					if(x+list.get(i)==7) {
						System.out.println("{ "+x+" , "+list.get(i)+" }");	
					}
				}else {
					continue;
				}
			}
		});

		long endTime = System.currentTimeMillis();

		System.out.println(endTime-startTime);
	}

}
